# -*- coding: utf-8 -*-
"""perfilenade.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UL2DgCuxUUNS_uFs3I83y2IDqdB5kQJW
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np


enade_data = pd.read_excel("baseEnade17_Sistemas.xlsx")

def calcular_percentual(freq):
    total = freq.sum()
    return (freq / total * 100).round(2)

sexo_freq = enade_data['SEXO'].value_counts()
sexo_freq['Total Geral'] = sexo_freq.sum()
sexo_percentual = calcular_percentual(sexo_freq)
sexo_freq = pd.concat([sexo_freq, sexo_percentual], axis=1, keys=['Frequência', 'Percentual (%)'])
print("Tabela de Frequências - Sexo:")
print(sexo_freq)

plt.figure(figsize=(8, 6))
sns.countplot(x='SEXO', data=enade_data)
plt.title('Porcentagem por Sexo')
plt.xlabel('Sexo')
plt.ylabel('Contagem')

plt.show()

turno_freq = enade_data['TURNO'].value_counts()
turno_freq['Total Geral'] = turno_freq.sum()
turno_percentual = calcular_percentual(turno_freq)
turno_freq = pd.concat([turno_freq, turno_percentual], axis=1, keys=['Frequência', 'Percentual (%)'])
print("Tabela de Frequências - Turno:")
print(turno_freq)

# Gráfico de barras para a variável de turno
plt.figure(figsize=(8, 6))
sns.countplot(x='TURNO', data=enade_data)
plt.title('Turnos')
plt.xlabel('Turno')
plt.ylabel('Contagem')
plt.show()

modalidade_freq = enade_data['MODALIDADE'].value_counts()
modalidade_freq['Total Geral'] = modalidade_freq.sum()
modalidade_percentual = calcular_percentual(modalidade_freq)
modalidade_freq = pd.concat([modalidade_freq, modalidade_percentual], axis=1, keys=['Frequência', 'Percentual (%)'])
print("Tabela de Frequências - Modalidade de Curso:")
print(modalidade_freq)

# Gráfico de barras para a variável de modalidade de curso
plt.figure(figsize=(8, 6))
sns.countplot(x='MODALIDADE', data=enade_data)
plt.title('Distribuição de Modalidade de Curso')
plt.xlabel('Modalidade dos Cursos')
plt.ylabel('Contagem')
plt.show()

categoria_freq = enade_data['CategoriaAdm'].value_counts()
categoria_freq['Total Geral'] = categoria_freq.sum()
categoria_percentual = calcular_percentual(categoria_freq)
categoria_freq = pd.concat([categoria_freq, categoria_percentual], axis=1, keys=['Frequência', 'Percentual (%)'])
print("Tabela de Frequências - Categoria Acadêmica:")
print(categoria_freq)

# Gráfico de barras para a variável de categoria acadêmica
plt.figure(figsize=(10, 6))
sns.countplot(x='CategoriaAdm', data=enade_data)
plt.title('Distribuição de Categoria Acadêmica')
plt.xlabel('Categoria Acadêmica')
plt.ylabel('Contagem')
plt.show()

notas = enade_data[['NOTA_GERAL']]

# Calculando estatísticas descritivas
media = notas.mean()
mediana = notas.median()
desvio_padrao = notas.std()
coeficiente_variacao = (desvio_padrao / media) * 100

print("Estatísticas Descritivas das Notas:")
print("Média:", media.values[0])
print("Mediana:", mediana.values[0])
print("Desvio Padrão:", desvio_padrao.values[0])
print("Coeficiente de Variação:", coeficiente_variacao.values[0])

plt.figure(figsize=(10, 6))
plt.hist(notas['NOTA_GERAL'], bins=20, color='orange', edgecolor='black')
plt.title('Histograma das Notas')
plt.xlabel('Nota')
plt.ylabel('Frequência')
plt.grid(True)
plt.show()

plt.figure(figsize=(8, 6))
sns.boxplot(x='NOTA_GERAL', data=notas, color='orange')
plt.title('Boxplot das Notas')
plt.xlabel('Nota')
plt.show()